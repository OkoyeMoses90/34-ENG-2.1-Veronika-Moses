{"ast":null,"code":"var _jsxFileName = \"/Users/veronikadmytryk/Documents/week1/Exercises/Week_2/ENG2.1-myTNT/src/components/Counter.tsx\";\nimport React from 'react';\n\nclass Counter extends React.Component {\n  constructor(props) {\n    //NOTE: this method is called when the Counter is first created; often used to intialize state\n    super(props);\n\n    this.increment = () => {\n      this.setState(state => ({\n        /* HINT: this will be the new state object */\n      }));\n      this.setState(state => ({\n        count: this.state.count + 1\n      }));\n    };\n\n    this.state = {\n      count: 0\n    }; //CONFIRM: You can set a different initial value for the count and have it display in the browser \n  }\n\n  componentWillMount() {//NOTE: this method is called before the component is displayed\n    //this.setState({count:3}); //CONFIRM: State can be changed using setState by uncommenting this line\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Hearts\",\n      onClick: () => this.increment(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, this.props.message, \" \", this.state.count); //this.props.message = \"Way to go!\" //CONFIRM: Properties CAN'T be changed; uncommenting this line causes an error\n  } //TODO: Finish the increment function to set a new state object with the incremented count \n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/veronikadmytryk/Documents/week1/Exercises/Week_2/ENG2.1-myTNT/src/components/Counter.tsx"],"names":["React","Counter","Component","constructor","props","increment","setState","state","count","componentWillMount","render","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAQA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAkE;AAChEC,EAAAA,WAAW,CAACC,KAAD,EAAoB;AAAE;AAC/B,UAAMA,KAAN;;AAD6B,SAkBvBC,SAlBuB,GAkBX,MAAM;AACxB,WAAKC,QAAL,CACIC,KAAK,KAAK;AAAC;AAAD,OAAL,CADT;AAIE,WAAKD,QAAL,CACEC,KAAK,KAAK;AACRC,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAiB;AADhB,OAAL,CADP;AAKF,KA5B6B;;AAE7B,SAAKD,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAC;AAAP,KAAb,CAF6B,CAEN;AACxB;;AAEDC,EAAAA,kBAAkB,GAAE,CAAE;AACpB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,OAAO,EAAE,MAAM,KAAKL,SAAL,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKD,KAAL,CAAWO,OADd,OACwB,KAAKJ,KAAL,CAAWC,KADnC,CADF,CADO,CAMP;AACD,GAjB+D,CAkBhE;;;AAlBgE;;AAgClE,eAAeP,OAAf","sourcesContent":["import React from 'react'\n\ninterface CounterProps{\n    message:string\n}\ninterface CounterState{\n    count:number\n}\nclass Counter extends React.Component<CounterProps, CounterState> {\n  constructor(props:CounterProps){ //NOTE: this method is called when the Counter is first created; often used to intialize state\n    super(props)\n    this.state = {count:0} //CONFIRM: You can set a different initial value for the count and have it display in the browser \n  }\n\n  componentWillMount(){ //NOTE: this method is called before the component is displayed\n    //this.setState({count:3}); //CONFIRM: State can be changed using setState by uncommenting this line\n  }\n\n  render() {\n    return (\n      <div className=\"Hearts\" onClick={() => this.increment()}>\n        {this.props.message} {this.state.count}\n      </div>\n    );\n    //this.props.message = \"Way to go!\" //CONFIRM: Properties CAN'T be changed; uncommenting this line causes an error\n  }\n  //TODO: Finish the increment function to set a new state object with the incremented count \n  private increment = () => {\n    this.setState(\n        state => ({/* HINT: this will be the new state object */})\n      );\n\n      this.setState(\n        state => ({\n          count: this.state.count+1\n        })\n      );\n   };\n}\n\nexport default Counter"]},"metadata":{},"sourceType":"module"}